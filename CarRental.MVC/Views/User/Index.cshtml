@using App.Areas.Identity.Models.UserViewModels
@using ShopNow.Presentation.Models

@model UserListModel
@{
    ViewData["Title"] = "List of user";
}
<h2>@ViewData["Title"]</h2>
<partial name="_StatusMessage"></partial>
<p>Total of user: @Model.totalUsers</p>

<div class="d-flex gap-2 mb-3" style="margin-right: 50%;">
    <input type="text" id="searchInput" placeholder="Search by username..." class="form-control">
    &nbsp;&nbsp;
    <button id="searchButton" class="btn btn-primary">Search</button>
</div>
<!-- Scrollable Table -->
<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
    <table class="table table-bordered table-hover">
        <thead class="table-success" style="position: sticky; top: 0; z-index: 1;">
            <tr>
                <th onclick="sortTable(0)">User Name <i class="fa fa-sort" aria-hidden="true"></i></th>
                <th onclick="sortTable(1)">Role <i class="fa fa-sort" aria-hidden="true"></i></th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="userTable">
            @foreach (var user in Model.users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>
                        @if (string.IsNullOrEmpty(user.RoleNames))
                        {
                            <a class="text-dark" asp-action="AddRole" asp-route-id="@user.Id">+ Add roles</a>
                        }
                        else
                        {
                            <a asp-action="AddRole" asp-route-id="@user.Id">@user.RoleNames</a>
                        }
                    </td>
                    <td>
                        <a class="btn btn-success btn-sm" asp-action="SetPassword" asp-route-id="@user.Id">Set Password</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@{
    var pagingmodel = new PagingModel()
            {
                currentpage = Model.currentPage,
                countpages = Model.countPages,
                generateUrl = (int? p) => Url.Action("Index", new { p = p, q = Context.Request.Query["q"] }) // Keep search query in pagination
            };
}

<script>
    // Function to get query parameter value
    function getQueryParam(name) {
        let params = new URLSearchParams(window.location.search);
        return params.get(name) || "";
    }

    // Preserve search input value on reload
    document.getElementById("searchInput").value = getQueryParam("q");

    // Search button click event
    document.getElementById("searchButton").addEventListener("click", function () {
        let searchValue = document.getElementById("searchInput").value.trim();
        let currentUrl = new URL(window.location.href);

        if (searchValue) {
            currentUrl.searchParams.set("q", searchValue);
        } else {
            currentUrl.searchParams.delete("q"); // Remove query if empty
        }

        currentUrl.searchParams.set("p", "1"); // Reset to first page
        window.location.href = currentUrl.toString();
    });

    // Sorting function
    function sortTable(columnIndex) {
        let table = document.querySelector(".table tbody");
        let rows = Array.from(table.rows);

        let ascending = table.getAttribute("data-sort") !== "asc";
        table.setAttribute("data-sort", ascending ? "asc" : "desc");

        rows.sort((rowA, rowB) => {
            let cellA = rowA.cells[columnIndex].innerText.trim().toLowerCase();
            let cellB = rowB.cells[columnIndex].innerText.trim().toLowerCase();
            return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
        });

        table.innerHTML = "";
        rows.forEach(row => table.appendChild(row));
    }
</script>

<partial name="_Paging" model="@pagingmodel" />
