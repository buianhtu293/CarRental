@model CarRental.MVC.Models.SearchViewModel
@{
    ViewBag.Title = "Kết quả tìm kiếm";

    var routeData = new Dictionary<string, string>();

    if (!string.IsNullOrEmpty(Model.SearchCriteria.ProvinceName))
    {
        routeData["ProvinceName"] = Model.SearchCriteria.ProvinceName;
    }
    if (Model.SearchCriteria.ProvinceId.HasValue)
    {
        routeData["ProvinceId"] = Model.SearchCriteria.ProvinceId.Value.ToString();
    }
    if (!string.IsNullOrEmpty(Model.SearchCriteria.DistrictName))
    {
        routeData["DistrictName"] = Model.SearchCriteria.DistrictName;
    }
    if (Model.SearchCriteria.DistrictId.HasValue)
    {
        routeData["DistrictId"] = Model.SearchCriteria.DistrictId.Value.ToString();
    }
    if (!string.IsNullOrEmpty(Model.SearchCriteria.WardName))
    {
        routeData["WardName"] = Model.SearchCriteria.WardName;
    }
    if (Model.SearchCriteria.WardId.HasValue)
    {
        routeData["WardId"] = Model.SearchCriteria.WardId.Value.ToString();
    }
    if (!string.IsNullOrEmpty(Model.SearchCriteria.Address))
    {
        routeData["Address"] = Model.SearchCriteria.Address;
    }
    if (Model.SearchCriteria.PickupDate.HasValue)
    {
        routeData["PickupDate"] = Model.SearchCriteria.PickupDate.Value.ToString("o");
    }
    if (Model.SearchCriteria.PickupTime.HasValue)
    {
        routeData["PickupTime"] = Model.SearchCriteria.PickupTime.Value.ToString();
    }
    if (Model.SearchCriteria.ReturnDate.HasValue)
    {
        routeData["ReturnDate"] = Model.SearchCriteria.ReturnDate.Value.ToString("o");
    }
    if (Model.SearchCriteria.ReturnTime.HasValue)
    {
        routeData["ReturnTime"] = Model.SearchCriteria.ReturnTime.Value.ToString();
    }

    routeData["sort"] = Model.CurrentSort;
    routeData["view"] = Model.CurrentView;
}

<div class="container mt-4">
    @Html.Partial("_SearchSection", Model.SearchCriteria)
    <h2 class="mb-3">Search Results</h2>

    @if (Model.SearchResult == null || !Model.SearchResult.Items.Any())
    {
        <div class="alert alert-warning">No cars match your credentials, please try again.</div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <p class="text-muted mb-0">Có @Model.SearchResult.TotalCount xe phù hợp cho bạn!</p>
            <div class="d-flex align-items-center">

                <div class="btn-group btn-group-sm me-3" role="group">
                    <a asp-all-route-data="@routeData.Where(kv => kv.Key != "view").Union(new[] { new KeyValuePair<string, string>("view", "grid") }).ToDictionary(k => k.Key, v => v.Value)"
                       class="btn @(Model.CurrentView == "grid" ? "btn-primary" : "btn-outline-secondary")">
                        <i class="fas fa-th-large"></i>
                    </a>

                    <a asp-all-route-data="@routeData.Where(kv => kv.Key != "view").Union(new[] { new KeyValuePair<string, string>("view", "list") }).ToDictionary(k => k.Key, v => v.Value)"
                       class="btn @(Model.CurrentView == "list" ? "btn-primary" : "btn-outline-secondary")">
                        <i class="fas fa-list"></i>
                    </a>
                </div>

                <form asp-action="Search" method="get" class="d-inline">
                    @foreach (var rd in routeData.Where(k => k.Key != "sort"))
                    {
                        <input type="hidden" name="@rd.Key" value="@rd.Value" />
                    }
                    <select name="sort" class="form-select form-select-sm" onchange="this.form.submit()">
                        <option value="newest" selected="@(Model.CurrentSort == "newest")">Mới nhất</option>
                        <option value="price_asc" selected="@(Model.CurrentSort == "price_asc")">Giá: Thấp đến Cao</option>
                        <option value="price_desc" selected="@(Model.CurrentSort == "price_desc")">Giá: Cao đến Thấp</option>
                    </select>
                </form>
            </div>
        </div>

        @if (Model.CurrentView == "list")
        {
            @await Html.PartialAsync("_CarListView", Model.SearchResult)
        }
        else
        {
            @await Html.PartialAsync("_CarGridView", Model.SearchResult)
        }

        <div class="d-flex justify-content-center mt-4">
            <nav>
                <ul class="pagination">
                    @if (Model.SearchResult.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-all-route-data="@routeData" asp-route-page="@(Model.SearchResult.Page - 1)">Previous</a>
                        </li>
                    }

                    @for (var i = 1; i <= Model.SearchResult.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.SearchResult.Page ? "active" : "")">
                            <a class="page-link" asp-all-route-data="@routeData" asp-route-page="@i">@i</a>
                        </li>
                    }

                    @if (Model.SearchResult.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" asp-all-route-data="@routeData" asp-route-page="@(Model.SearchResult.Page + 1)">Next</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
	<div id="cartToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
		<div class="d-flex">
			<div class="toast-body" id="cartToastMessage"></div>
			<button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
		</div>
	</div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/location-picker.js"></script>

	<script>
        function addToCart(carId) {
            const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenElement ? tokenElement.value : '';

            fetch('/Cart/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ carId: carId })
            })
                .then(res => {
                    return res.json().then(data => {
                        // Pass both data and status to next step
                        return { ok: res.ok, data };
                    });
                })
                .then(result => {
                    showToast(result.data.message, result.ok); // true if res.ok, false if error
                })
                .catch(() => {
                    showToast("User Unauthorized.", false);
                });

        }

        function showToast(message, isSuccess) {
            const toastEl = document.getElementById('cartToast');
            const toastMsg = document.getElementById('cartToastMessage');

            // Change color depending on success or error
            toastEl.classList.remove('bg-success', 'bg-danger');
            toastEl.classList.add(isSuccess ? 'bg-success' : 'bg-danger');

            const toast = new bootstrap.Toast(toastEl);
            toastMsg.textContent = message;
            toast.show();
        }

	</script>
}